#!/usr/bin/env node

/**
 * Module dependencies.
 */

var env = process.env.NODE_ENV || 'development';
var appDestination = env === 'production' ? '../app' : '../dist/app';
var app = require(appDestination + '/app');

var http = require('http');

var port = parseInt(process.env.PORT) || '3000';
app.setPort(port);

var server = http.createServer(app.default);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

if (env === 'production') {
  process.on('SIGTERM', terminate);
  process.on('SIGINT', terminate);
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}

function terminate() {
  console.log('Terminate signal received: closing HTTP server')
  server.close(() => {
    console.log('HTTP server closed');
    app.close();
    process.exit(1);
  })
}
